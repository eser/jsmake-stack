const e=Array.hasOwnProperty("from")?Array.from:function(e,r,n){const o=null==n?this:n;if(null==e)throw new TypeError("Array.from requires an array-like object - not null or undefined");if(null!=r){if(!(r instanceof Function))throw new TypeError("Array.from: when provided, the second argument must be a function");return[...e].reduce((e,n,t)=>[...e,r.call(o,n,t)],[])}return[...e]};Object.hasOwnProperty("assign")&&Object.assign;const r=Reflect.hasOwnProperty("ownKeys")?Reflect.ownKeys:function(e){return[...Object.getOwnPropertyNames(e),...Object.getOwnPropertySymbols(e)]};Object.hasOwnProperty("entries")&&Object.entries;Object.hasOwnProperty("values")&&Object.values;function n(e){return(e.constructor===Array?e:[...e]).reduce((e,r)=>[r,...e],[])}function o(){console.log("ponyfills:"),console.log(e),console.log(e(["a","b"])),console.log("immunity:"),console.log(n),console.log(n(["a","b"]))}export{o as test};
